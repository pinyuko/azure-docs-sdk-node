### YamlMime:TSType
name: Reservation
uid: '@azure/arm-reservations.Reservation'
package: '@azure/arm-reservations'
summary: Interface representing a Reservation.
fullName: Reservation
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      beginAvailableScopes(string, string, AvailableScopeRequest,
      ReservationAvailableScopesOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginAvailableScopes'
    package: '@azure/arm-reservations'
    summary: Get Available Scopes for `Reservation`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginAvailableScopes(reservationOrderId: string, reservationId:
        string, body: AvailableScopeRequest, options?:
        ReservationAvailableScopesOptionalParams):
        Promise<PollerLike<PollOperationState<ReservationAvailableScopesResponse>,
        ReservationAvailableScopesResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the Reservation Item
        - id: body
          type: <xref uid="@azure/arm-reservations.AvailableScopeRequest" />
          description: Available scope
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationAvailableScopesOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-reservations.ReservationAvailableScopesResponse"
          />&gt;, <xref
          uid="@azure/arm-reservations.ReservationAvailableScopesResponse"
          />&gt;&gt;
  - name: >-
      beginAvailableScopesAndWait(string, string, AvailableScopeRequest,
      ReservationAvailableScopesOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginAvailableScopesAndWait'
    package: '@azure/arm-reservations'
    summary: Get Available Scopes for `Reservation`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginAvailableScopesAndWait(reservationOrderId: string,
        reservationId: string, body: AvailableScopeRequest, options?:
        ReservationAvailableScopesOptionalParams):
        Promise<ReservationAvailableScopesResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the Reservation Item
        - id: body
          type: <xref uid="@azure/arm-reservations.AvailableScopeRequest" />
          description: Available scope
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationAvailableScopesOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.ReservationAvailableScopesResponse"
          />&gt;
  - name: 'beginMerge(string, MergeRequest, ReservationMergeOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.beginMerge'
    package: '@azure/arm-reservations'
    summary: >-
      Merge the specified `Reservation`s into a new `Reservation`. The two
      `Reservation`s being merged

      must have same properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMerge(reservationOrderId: string, body: MergeRequest,
        options?: ReservationMergeOptionalParams):
        Promise<PollerLike<PollOperationState<ReservationMergeResponse>,
        ReservationMergeResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.MergeRequest" />
          description: Information needed for commercial request for a reservation
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationMergeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-reservations.ReservationMergeResponse" />&gt;, <xref
          uid="@azure/arm-reservations.ReservationMergeResponse" />&gt;&gt;
  - name: 'beginMergeAndWait(string, MergeRequest, ReservationMergeOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.beginMergeAndWait'
    package: '@azure/arm-reservations'
    summary: >-
      Merge the specified `Reservation`s into a new `Reservation`. The two
      `Reservation`s being merged

      must have same properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginMergeAndWait(reservationOrderId: string, body:
        MergeRequest, options?: ReservationMergeOptionalParams):
        Promise<ReservationMergeResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.MergeRequest" />
          description: Information needed for commercial request for a reservation
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationMergeOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.ReservationMergeResponse" />&gt;
  - name: 'beginSplit(string, SplitRequest, ReservationSplitOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.beginSplit'
    package: '@azure/arm-reservations'
    summary: >-
      Split a `Reservation` into two `Reservation`s with specified quantity
      distribution.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginSplit(reservationOrderId: string, body: SplitRequest,
        options?: ReservationSplitOptionalParams):
        Promise<PollerLike<PollOperationState<ReservationSplitResponse>,
        ReservationSplitResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.SplitRequest" />
          description: Information needed to Split a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationSplitOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-reservations.ReservationSplitResponse" />&gt;, <xref
          uid="@azure/arm-reservations.ReservationSplitResponse" />&gt;&gt;
  - name: 'beginSplitAndWait(string, SplitRequest, ReservationSplitOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.beginSplitAndWait'
    package: '@azure/arm-reservations'
    summary: >-
      Split a `Reservation` into two `Reservation`s with specified quantity
      distribution.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginSplitAndWait(reservationOrderId: string, body:
        SplitRequest, options?: ReservationSplitOptionalParams):
        Promise<ReservationSplitResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.SplitRequest" />
          description: Information needed to Split a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationSplitOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.ReservationSplitResponse" />&gt;
  - name: 'beginUpdate(string, string, Patch, ReservationUpdateOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.beginUpdate'
    package: '@azure/arm-reservations'
    summary: Updates the applied scopes of the `Reservation`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(reservationOrderId: string, reservationId: string,
        parameters: Patch, options?: ReservationUpdateOptionalParams):
        Promise<PollerLike<PollOperationState<ReservationUpdateResponse>,
        ReservationUpdateResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the Reservation Item
        - id: parameters
          type: <xref uid="@azure/arm-reservations.Patch" />
          description: Information needed to patch a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationUpdateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;PollerLike&lt;PollOperationState&lt;<xref
          uid="@azure/arm-reservations.ReservationUpdateResponse" />&gt;, <xref
          uid="@azure/arm-reservations.ReservationUpdateResponse" />&gt;&gt;
  - name: 'beginUpdateAndWait(string, string, Patch, ReservationUpdateOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.beginUpdateAndWait'
    package: '@azure/arm-reservations'
    summary: Updates the applied scopes of the `Reservation`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateAndWait(reservationOrderId: string, reservationId:
        string, parameters: Patch, options?: ReservationUpdateOptionalParams):
        Promise<ReservationUpdateResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the Reservation Item
        - id: parameters
          type: <xref uid="@azure/arm-reservations.Patch" />
          description: Information needed to patch a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationUpdateOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.ReservationUpdateResponse" />&gt;
  - name: 'get(string, string, ReservationGetOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.get'
    package: '@azure/arm-reservations'
    summary: Get specific `Reservation` details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(reservationId: string, reservationOrderId: string,
        options?: ReservationGetOptionalParams): Promise<ReservationGetResponse>
      parameters:
        - id: reservationId
          type: string
          description: Id of the Reservation Item
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: options
          type: <xref uid="@azure/arm-reservations.ReservationGetOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-reservations.ReservationGetResponse"
          />&gt;
  - name: 'list(string, ReservationListOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.list'
    package: '@azure/arm-reservations'
    summary: List `Reservation`s within a single `ReservationOrder`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(reservationOrderId: string, options?:
        ReservationListOptionalParams):
        PagedAsyncIterableIterator<ReservationResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: options
          type: <xref uid="@azure/arm-reservations.ReservationListOptionalParams" />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />&gt;
  - name: listAll(ReservationListAllOptionalParams)
    uid: '@azure/arm-reservations.Reservation.listAll'
    package: '@azure/arm-reservations'
    summary: >-
      List the reservations and the roll up counts of reservations group by
      provisioning states that the

      user has access to in the current tenant.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAll(options?: ReservationListAllOptionalParams):
        PagedAsyncIterableIterator<ReservationResponse>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationListAllOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />&gt;
  - name: 'listRevisions(string, string, ReservationListRevisionsOptionalParams)'
    uid: '@azure/arm-reservations.Reservation.listRevisions'
    package: '@azure/arm-reservations'
    summary: List of all the revisions for the `Reservation`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listRevisions(reservationId: string, reservationOrderId:
        string, options?: ReservationListRevisionsOptionalParams):
        PagedAsyncIterableIterator<ReservationResponse>
      parameters:
        - id: reservationId
          type: string
          description: Id of the Reservation Item
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationListRevisionsOptionalParams"
            />
          description: |
            The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />&gt;
