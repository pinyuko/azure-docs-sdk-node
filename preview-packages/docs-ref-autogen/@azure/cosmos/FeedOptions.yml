### YamlMime:TSType
name: FeedOptions
uid: '@azure/cosmos.FeedOptions'
package: '@azure/cosmos'
summary: The feed options and query methods.
fullName: FeedOptions
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: abortSignal
    uid: '@azure/cosmos.FeedOptions.abortSignal'
    package: '@azure/cosmos'
    summary: >+
      abortSignal to pass to all underlying network requests created by this
      method call. See
      https://developer.mozilla.org/en-US/docs/Web/API/AbortController


      **Example**


      Cancel a read request

      ```typescript

      const controller = new AbortController()

      const {result: item} = await items.query('SELECT * from c', { abortSignal:
      controller.signal});

      controller.abort()

      ```

    fullName: abortSignal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'abortSignal?: AbortSignal_2'
      return:
        description: ''
        type: AbortSignal_2
  - name: accessCondition
    uid: '@azure/cosmos.FeedOptions.accessCondition'
    package: '@azure/cosmos'
    summary: Conditions Associated with the request.
    fullName: accessCondition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accessCondition?: { condition: string, type: string }'
      return:
        description: ''
        type: '{ condition: string, type: string }'
  - name: bufferItems
    uid: '@azure/cosmos.FeedOptions.bufferItems'
    package: '@azure/cosmos'
    summary: >
      Enable buffering additional items during queries. Default: false

      This will buffer an additional page at a time (multiplied by
      maxDegreeOfParallelism) from the server in the background.

      This improves latency by fetching pages before they are needed by the
      client. If you're draining all of the results from the

      server, like `.fetchAll`, you should usually enable this. If you're only
      fetching one page at a time via continuation token,

      you should avoid this. If you're draining more than one page, but not the
      entire result set, it may help improve latency, but

      it will increase the total amount of RU/s use to serve the entire query
      (as some pages will be fetched more than once).
    fullName: bufferItems
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'bufferItems?: boolean'
      return:
        description: ''
        type: boolean
  - name: continuation
    uid: '@azure/cosmos.FeedOptions.continuation'
    package: '@azure/cosmos'
    summary: 'Opaque token for continuing the enumeration. Default: undefined'
    fullName: continuation
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use continuationToken instead.
    syntax:
      content: 'continuation?: string'
      return:
        description: ''
        type: string
  - name: continuationToken
    uid: '@azure/cosmos.FeedOptions.continuationToken'
    package: '@azure/cosmos'
    summary: 'Opaque token for continuing the enumeration. Default: undefined'
    fullName: continuationToken
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'continuationToken?: string'
      return:
        description: ''
        type: string
  - name: continuationTokenLimitInKB
    uid: '@azure/cosmos.FeedOptions.continuationTokenLimitInKB'
    package: '@azure/cosmos'
    summary: >
      Limits the size of the continuation token in the response. Default:
      undefined

      Continuation Tokens contain optional data that can be removed from the
      serialization before writing it out to a header.

      By default we are capping this to 1kb to avoid long headers (Node.js has a
      global header size limit).

      A user may set this field to allow for longer headers, which can help the
      backend optimize query execution."
    fullName: continuationTokenLimitInKB
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'continuationTokenLimitInKB?: number'
      return:
        description: ''
        type: number
  - name: enableScanInQuery
    uid: '@azure/cosmos.FeedOptions.enableScanInQuery'
    package: '@azure/cosmos'
    summary: >
      Allow scan on the queries which couldn't be served as indexing was opted
      out on the requested paths. Default: false

      In general, it is best to avoid using this setting. Scans are relatively
      expensive and take a long time to serve.
    fullName: enableScanInQuery
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableScanInQuery?: boolean'
      return:
        description: ''
        type: boolean
  - name: forceQueryPlan
    uid: '@azure/cosmos.FeedOptions.forceQueryPlan'
    package: '@azure/cosmos'
    summary: >
      This setting forces the query to use a query plan. Default: false

      Note: this will disable continuation token support, even for single
      partition queries.


      For queries like aggregates and most cross partition queries, this happens
      anyway.

      However, since the library doesn't know what type of query it is until we
      get back the first response,

      some optimization can't happen until later.


      If this setting is enabled, it will force query plan for the query, which
      will save some network requests

      and ensure parallelism can happen. Useful for when you know you're doing
      cross-partition or aggregate queries.
    fullName: forceQueryPlan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'forceQueryPlan?: boolean'
      return:
        description: ''
        type: boolean
  - name: initialHeaders
    uid: '@azure/cosmos.FeedOptions.initialHeaders'
    package: '@azure/cosmos'
    summary: >-
      (Advanced use case) Initial headers to start with when sending requests to
      Cosmos
    fullName: initialHeaders
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'initialHeaders?: CosmosHeaders'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosHeaders" />
  - name: maxDegreeOfParallelism
    uid: '@azure/cosmos.FeedOptions.maxDegreeOfParallelism'
    package: '@azure/cosmos'
    summary: >-
      The maximum number of concurrent operations that run client side during
      parallel query execution in the

      Azure Cosmos DB database service. Negative values make the system
      automatically decides the number of

      concurrent operations to run. Default: 0 (no parallelism)
    fullName: maxDegreeOfParallelism
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxDegreeOfParallelism?: number'
      return:
        description: ''
        type: number
  - name: maxItemCount
    uid: '@azure/cosmos.FeedOptions.maxItemCount'
    package: '@azure/cosmos'
    summary: >
      Max number of items to be returned in the enumeration operation. Default:
      undefined (server will defined payload)

      Expirimenting with this value can usually result in the biggest
      performance changes to the query.


      The smaller the item count, the faster the first result will be delivered
      (for non-aggregates). For larger amounts,

      it will take longer to serve the request, but you'll usually get better
      throughput for large queries (i.e. if you need 1000 items

      before you can do any other actions, set `maxItemCount` to 1000. If you
      can start doing work after the first 100, set `maxItemCount` to 100.)
    fullName: maxItemCount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxItemCount?: number'
      return:
        description: ''
        type: number
  - name: partitionKey
    uid: '@azure/cosmos.FeedOptions.partitionKey'
    package: '@azure/cosmos'
    summary: >
      Limits the query to a specific partition key. Default: undefined
       Scoping a query to a single partition can be accomplished two ways:

      `container.items.query('SELECT * from c', { partitionKey: "foo"
      }).toArray()`

      `container.items.query('SELECT * from c WHERE c.yourPartitionKey =
      "foo"').toArray()`


      The former is useful when the query body is out of your control

      but you still want to restrict it to a single partition. Example: an end
      user specified query.
    fullName: partitionKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'partitionKey?: any'
      return:
        description: ''
        type: any
  - name: populateQueryMetrics
    uid: '@azure/cosmos.FeedOptions.populateQueryMetrics'
    package: '@azure/cosmos'
    summary: >
      Enable returning query metrics in response headers. Default: false

      Used for debugging slow or expensive queries. Also increases response size
      and if you're using a low max header size in Node.js,

      you can run into issues faster.
    fullName: populateQueryMetrics
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'populateQueryMetrics?: boolean'
      return:
        description: ''
        type: boolean
  - name: sessionToken
    uid: '@azure/cosmos.FeedOptions.sessionToken'
    package: '@azure/cosmos'
    summary: >-
      Enables/disables getting document container quota related stats for
      document container read requests.
    fullName: sessionToken
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sessionToken?: string'
      return:
        description: ''
        type: string
  - name: useIncrementalFeed
    uid: '@azure/cosmos.FeedOptions.useIncrementalFeed'
    package: '@azure/cosmos'
    summary: >
      Note: consider using changeFeed instead.

      Indicates a change feed request. Must be set to "Incremental feed", or
      omitted otherwise. Default: false
    fullName: useIncrementalFeed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useIncrementalFeed?: boolean'
      return:
        description: ''
        type: boolean
extends: <xref uid="@azure/cosmos.SharedOptions" />
