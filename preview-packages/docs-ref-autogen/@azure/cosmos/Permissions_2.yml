### YamlMime:TSType
name: Permissions_2
uid: '@azure/cosmos.Permissions_2'
package: '@azure/cosmos'
summary: >-
  Use to create, replace, query, and read all Permissions.


  See <xref:@azure/cosmos.Permission> to read, replace, or delete a specific
  permission by id.
fullName: Permissions_2
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: user
    uid: '@azure/cosmos.Permissions_2.user'
    package: '@azure/cosmos'
    summary: ''
    fullName: user
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'user: User'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.User" />
methods:
  - name: 'create(PermissionDefinition, RequestOptions)'
    uid: '@azure/cosmos.Permissions_2.create'
    package: '@azure/cosmos'
    summary: >-
      Create a permission.

      A permission represents a per-User Permission to access a specific
      resource

      e.g. Item or Container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(body: PermissionDefinition, options?: RequestOptions):
        Promise<PermissionResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.PermissionDefinition" />
          description: |
            Represents the body of the permission.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
  - name: 'query(SqlQuerySpec, FeedOptions)'
    uid: '@azure/cosmos.Permissions_2.query'
    package: '@azure/cosmos'
    summary: Query all permissions.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function query(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >
            Query configuration for the operation. See
            <xref:@azure/cosmos.SqlQuerySpec> for more info on how to configure
            a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: 'query<T>(SqlQuerySpec, FeedOptions)'
    uid: '@azure/cosmos.Permissions_2.query_1'
    package: '@azure/cosmos'
    summary: Query all permissions.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >
            Query configuration for the operation. See
            <xref:@azure/cosmos.SqlQuerySpec> for more info on how to configure
            a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Permissions_2.readAll'
    package: '@azure/cosmos'
    summary: >+
      Read all permissions.


      **Example**


      Read all permissions to array.

      ```typescript

      const {body: permissionList} = await
      user.permissions.readAll().fetchAll();

      ```

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions):
        QueryIterator<PermissionDefinition & Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.PermissionDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
  - name: 'upsert(PermissionDefinition, RequestOptions)'
    uid: '@azure/cosmos.Permissions_2.upsert'
    package: '@azure/cosmos'
    summary: |
      Upsert a permission.
      A permission represents a per-User Permission to access a
      specific resource e.g. Item or Container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function upsert(body: PermissionDefinition, options?: RequestOptions):
        Promise<PermissionResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.PermissionDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
