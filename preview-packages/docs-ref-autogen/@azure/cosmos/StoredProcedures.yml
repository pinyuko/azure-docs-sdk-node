### YamlMime:TSType
name: StoredProcedures
uid: '@azure/cosmos.StoredProcedures'
package: '@azure/cosmos'
summary: >
  Operations for creating, upserting, or reading/querying all Stored Procedures.

  For operations to read, replace, delete, or execute a specific, existing
  stored procedure by id, see `container.storedProcedure()`.
fullName: StoredProcedures
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.StoredProcedures.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
methods:
  - name: 'create(StoredProcedureDefinition, RequestOptions)'
    uid: '@azure/cosmos.StoredProcedures.create'
    package: '@azure/cosmos'
    summary: >
      Create a StoredProcedure.

      Azure Cosmos DB allows stored procedures to be executed in the storage
      tier,

      directly against an item container. The script

      gets executed under ACID transactions on the primary storage partition of
      the

      specified container. For additional details,

      refer to the server-side JavaScript API documentation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(body: StoredProcedureDefinition, options?:
        RequestOptions): Promise<StoredProcedureResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.StoredProcedureDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.StoredProcedureResponse" />&gt;
  - name: 'query(SqlQuerySpec, FeedOptions)'
    uid: '@azure/cosmos.StoredProcedures.query'
    package: '@azure/cosmos'
    summary: >+
      Query all Stored Procedures.


      **Example**


      Read all stored procedures to array.

      ```typescript

      const querySpec: SqlQuerySpec = {
        query: "SELECT * FROM root r WHERE r.id = @sproc",
        parameters: [
          {name: "@sproc", value: "Todo"}
        ]
      };

      const {body: sprocList} = await
      containers.storedProcedures.query(querySpec).fetchAll();

      ```

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function query(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            <xref:@azure/cosmos.SqlQuerySpec> for more info on how to configure
            a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: 'query<T>(SqlQuerySpec, FeedOptions)'
    uid: '@azure/cosmos.StoredProcedures.query_1'
    package: '@azure/cosmos'
    summary: >+
      Query all Stored Procedures.


      **Example**


      Read all stored procedures to array.

      ```typescript

      const querySpec: SqlQuerySpec = {
        query: "SELECT * FROM root r WHERE r.id = @sproc",
        parameters: [
          {name: "@sproc", value: "Todo"}
        ]
      };

      const {body: sprocList} = await
      containers.storedProcedures.query(querySpec).fetchAll();

      ```

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            <xref:@azure/cosmos.SqlQuerySpec> for more info on how to configure
            a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.StoredProcedures.readAll'
    package: '@azure/cosmos'
    summary: >+
      Read all stored procedures.


      **Example**


      Read all stored procedures to array.

      ```typescript

      const {body: sprocList} = await
      containers.storedProcedures.readAll().fetchAll();

      ```

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions):
        QueryIterator<StoredProcedureDefinition & Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.StoredProcedureDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
